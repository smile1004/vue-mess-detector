import type { SFCScriptBlock } from '@vue/compiler-sfc'
import { createRegExp } from 'magic-regexp'
import getLineNumber from '../getLineNumber'
import type { FileCheckResult, Offense } from '../../types'

const results: FileCheckResult[] = []

const resetResults = () => (results.length = 0)

/* TODO use the correct parameter from the following list:
  - "script: SFCScriptBlock" ~ this rule will apply to ts, js and vue files
  - "styles: SFCStyleBlock[]" ~ applied only for vue files
  - "template: SFCTemplateBlock" ~ applied only for vue files
  - "descriptor: SFCDescriptor" ~ applied only for vue files
*/
const check_RULENAME_ = (script: SFCScriptBlock | null, filePath: string) => {
  if (!script) {
    return
  }

  resetResults()

  const regex = createRegExp(/* TODO create your regex here with magic regexp or plain regex */)
  const matches = script.content.match(regex)

  // TODO add your rule logic, constants, etc here

  matches?.forEach((match) => {
    const lineNumber = getLineNumber(script.content, match)
    results.push({
      filePath,
      message: `line #${lineNumber} <bg_warn>/* TODO add your message here*/ </bg_warn>`,
    })
  })
}

const report_RULENAME_ = () => {
  const offenses: Offense[] = []

  if (results.length > 0) {
    results.forEach((result) => {
      offenses.push({
        file: result.filePath,
        rule: `<text_info>_RULESET_ ~ _HUMANRULENAME_</text_info>`,
        description: `ðŸ‘‰ <text_warn>/* TODO tip to fix this issue */.</text_warn> See: https:///* TODO doc link */`,
        message: `${result.message} ðŸš¨`,
      })
    })
  }
  return offenses
}

export { check_RULENAME_, report_RULENAME_}